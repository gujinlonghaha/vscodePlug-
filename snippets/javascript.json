{
    "import": {
        "prefix": "import",
        "body": [
            "import $1 from '$2'"
        ],
        "description": "import ... from ..."
    },
    "nextTick": {
        "prefix": "nextTick",
        "body": [
            "Vue.nextTick({",
            "\t$1",
            "})"
        ],
        "description": "Vue.nextTick( callback, [context] )"
    },
    "nextTickThen": {
        "prefix": "nextTickThen",
        "body": [
            "Vue.nextTick({",
            "\t$1",
            "}).then(function ($2) {",
            "\t$3",
            "})"
        ],
        "description": "Vue.nextTick( callback, [context] ).then(function(){ })"
    },
    "set": {
        "prefix": "set",
        "body": [
            "Vue.set(${1:target}, ${2:key}, ${3:value})"
        ],
        "description": "Vue.set( target, key, value )"
    },
    "delete": {
        "prefix": "delete",
        "body": [
            "Vue.delete(${1:target}, ${2:key})"
        ],
        "description": "Vue.delete( target, key )"
    },
    "filter": {
        "prefix": "filter",
        "body": [
            "Vue.filter(${1:id}${2:, [definition]})"
        ],
        "description": "Vue.filter( id, [definition] )"
    },
    "component": {
        "prefix": "component",
        "body": [
            "Vue.component(${1:id}${2:, [definition]})$0"
        ],
        "description": "Vue.component( id, [definition] )"
    },
    "use": {
        "prefix": "use",
        "body": [
            "Vue.use(${1:plugin})$0"
        ],
        "description": "Vue.use( plugin )"
    },
    "mixin": {
        "prefix": "mixin",
        "body": [
            "Vue.mixin({${1:mixin}})"
        ],
        "description": "Vue.mixin( mixin )"
    },
    "data": {
        "prefix": "data",
        "body": [
            "data() {",
            "\treturn {",
            "\t\t$1",
            "\t}",
            "},$0"
        ],
        "description": "The data object for the Vue instance."
    },
    "props": {
        "prefix": "props",
        "body": [
            "props: {",
            "type: Number,",
            "required: true,",
            "default: function () {",
            "return { message: 'hello' }",
            "},",
            "validator: function (value) {",
            "return ['success', 'warning', 'danger'].indexOf(value) !== -1",
            "}",
            "}"
        ]
    },
    "computed": {
        "prefix": "computed",
        "body": [
            "computed: {",
            "aDouble: function () {",
            " return this.a * 2",
            "},",
            "aPlus: {",
            " get: function () {",
            "return this.a + 1",
            "},",
            "set: function (v) {",
            "this.a = v - 1",
            "}",
            "},",
            "},"
        ],
        "description": "Computed properties to be mixed into the Vue instance. "
    },
    "methods": {
        "prefix": "methods",
        "body": [
            "methods: {",
            "plus$0: function () {",
            "}",
            "},$1"
        ],
        "description": "Methods to be mixed into the Vue instance."
    },
    "theTemplate": {
        "prefix": "theTemplate",
        "body": [
            "<ThePlanOrg v-model=\"modelObj.parentId\" styleOption=\"width:300px\"></ThePlanOrg>",
            "<template>",
            "<a-select",
            "v-model=\"valueCopy\"",
            "v-on=\"\\$listeners\"",
            "v-bind=\"\\$attrs\"",
            ":style=\"styleOption\"",
            "@change=\"change\"",
            ">",
            "<a-select-option v-for=\"t in list\" :key=\"t.id\">",
            "{{ t.name }}",
            "</a-select-option>",
            "</a-select>",
            "</template>",
            "<script>",
            "import {  getCounorg as getFun } from \"@/api/basicInformation.js\";",
            "export default {",
            "model: {",
            "prop: \"value\",",
            "event: \"change\"",
            "},",
            "props: {",
            "value: {},",
            "styleOption: {",
            "default() {",
            "return `width:300px`;",
            "}",
            "}",
            "},",
            "data() {",
            "return {",
            "list: []",
            "};",
            "},",
            "mounted() {",
            "this.getFun();",
            "},",
            "computed: {",
            "valueCopy: {",
            "get() {",
            "return this.value;",
            "},",
            "set(val) {",
            "this.\\$emit(\"change\", val);",
            "}",
            "}",
            "},",
            "methods: {",
            "change(val) {",
            "this.$emit(\"change\", val);",
            "},",
            "getFun() {",
            "getFun({}).then(res => {",
            "this.list = res.data || [];",
            " });",
            "}",
            "}",
            "};",
            "</script>",
            "<style scoped lang=\"less\">",
            "</style>"
        ],
        "description": "自定义插件"
    },
    "watch": {
        "prefix": "watch",
        "body": [
            "watch: {",
            "d$1: {",
            "handler: function (val, oldVal) {$0 },",
            "deep:true,",
            "immediate: true,",
            "}",
            "},"
        ],
        "description": "An object where keys are expressions to watch and values are the corresponding callbacks. The value can also be a string of a method name, or an Object that contains additional options. Note that you should not use an arrow function to define a watcher."
    },
    "watch2": {
        "prefix": "watch",
        "body": [
            "${1:key}: {",
            "\tdeep: ${2:true},",
            "\timmediate: ${3:true},",
            "\thandler: function (${4:val}, ${5:oldVal}) {",
            "\t\t$6",
            "\t}",
            "},$0"
        ],
        "description": "Vue Watcher with options."
    },
    "beforeCreate": {
        "prefix": "beforeCreate",
        "body": [
            "beforeCreate() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "created": {
        "prefix": "created",
        "body": [
            "created() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "beforeMount": {
        "prefix": "beforeMount",
        "body": [
            "beforeMount() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "mounted": {
        "prefix": "mounted",
        "body": [
            "mounted() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "beforeUpdate": {
        "prefix": "beforeUpdate",
        "body": [
            "beforeUpdate() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "updated": {
        "prefix": "updated",
        "body": [
            "updated() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "activated": {
        "prefix": "activated",
        "body": [
            "activated() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "deactivated": {
        "prefix": "deactivated",
        "body": [
            "deactivated() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "beforeDestroy": {
        "prefix": "beforeDestroy",
        "body": [
            "beforeDestroy() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "destroyed": {
        "prefix": "destroyed",
        "body": [
            "destroyed() {",
            "\t$1",
            "},"
        ],
        "description": "Type: Function."
    },
    "directives": {
        "prefix": "directives",
        "body": [
            "directives"
        ],
        "description": "just a word"
    },
    "filters": {
        "prefix": "filters",
        "body": [
            "filters"
        ],
        "description": "just a word"
    },
    "components": {
        "prefix": "components",
        "body": [
            "components"
        ],
        "description": "just a word"
    },
    "parent": {
        "prefix": "parent",
        "body": [
            "parent"
        ],
        "description": "just a word"
    },
    "mixins": {
        "prefix": "mixins",
        "body": [
            "mixins: [mixinName]"
        ],
        "description": "just a word"
    },
    "provide": {
        "prefix": "provide",
        "body": [
            "provide"
        ],
        "description": "just a word"
    },
    "inject": {
        "prefix": "inject",
        "body": [
            "inject"
        ],
        "description": "just a word"
    },
    "functional": {
        "prefix": "functional",
        "body": [
            "functional"
        ],
        "description": "just a word"
    },
    "model": {
        "prefix": "model",
        "body": [
            "model: {",
            "prop: 'checked',",
            "event: 'change'",
            "},"
        ],
        "description": "just a word"
    },
    "comments": {
        "prefix": "comments",
        "body": [
            "comments"
        ],
        "description": "just a word"
    },
    "deep": {
        "prefix": "deep",
        "body": [
            "deep"
        ],
        "description": "just a word"
    },
    "immediate": {
        "prefix": "immediate",
        "body": [
            "immediate"
        ],
        "description": "just a word"
    },
    "vm.$props": {
        "prefix": "vmProps",
        "body": [
            "${1|this,vm|}.\\$props$2"
        ],
        "description": "Type: Object. Read only."
    },
    "vm.$el": {
        "prefix": "vmEl",
        "body": [
            "${1|this,vm|}.\\$el$2"
        ],
        "description": "Type: HTMLElement. Read only."
    },
    "vm.$options": {
        "prefix": "vmOptions",
        "body": [
            "${1|this,vm|}.\\$options$2"
        ],
        "description": "Type: Object. Read only."
    },
    "vm.$parent": {
        "prefix": "vmParent",
        "body": [
            "${1|this,vm|}.\\$parent$2"
        ],
        "description": "Type: Vue instance. Read only."
    },
    "vm.$root": {
        "prefix": "vmRoot",
        "body": [
            "${1|this,vm|}.\\$root$2"
        ],
        "description": "Type: Vue instance. Read only."
    },
    "vm.$children": {
        "prefix": "vmChildren",
        "body": [
            "${1|this,vm|}.\\$children$2"
        ],
        "description": "Type: Array<Vue instance>. Read only."
    },
    "vm.$slots": {
        "prefix": "vmSlots",
        "body": [
            "${1|this,vm|}.\\$slots$2"
        ],
        "description": "Type: Object. Read only."
    },
    "vm.$refs": {
        "prefix": "vmRefs",
        "body": [
            "${1|this,vm|}.\\$refs$2"
        ],
        "description": "Type: Object. Read only."
    },
    "vm.$isServer": {
        "prefix": "vmIsServer",
        "body": [
            "${1|this,vm|}.\\$isServer$2"
        ],
        "description": "Type: boolean. Read only."
    },
    "vm.$attrs": {
        "prefix": "vmAttrs",
        "body": [
            "${1|this,vm|}.\\$attrs$2"
        ],
        "description": "Type: { [key: string]: string }. Read only."
    },
    "vm.$listeners": {
        "prefix": "vmListeners",
        "body": [
            "${1|this,vm|}.\\$listeners$2"
        ],
        "description": "Type: { [key: string]: Function | Array<Function> }. Read only."
    },
    "vm.$watch": {
        "prefix": "vmWatch",
        "body": [
            "${1|this,vm|}.\\$watch(${2:expOrFn}, ${3:callback}${4:, [options]})"
        ],
        "description": "vm.$watch( expOrFn, callback, [options] )\n Arguments:\n {string | Function} expOrFn\n {Function | Object} callback\n {Object} [options]\n {boolean} [options.deep]\n\t {boolean} [options.immediate]"
    },
    "vm.$set": {
        "prefix": "vmSet",
        "body": [
            "${1|this,vm|}.\\$set(${2:target}, ${3:key}, ${4:value})"
        ],
        "description": "vm.$set( target, key, value ). This is the alias of the global Vue.set."
    },
    "vm.$delete": {
        "prefix": "vmDelete",
        "body": [
            "${1|this,vm|}.\\$delete(${2:target}, ${3:key}). This is the alias of the global Vue.delete."
        ],
        "description": "vm.$delete( target, key )"
    },
    "vm.$on": {
        "prefix": "vmOn",
        "body": [
            "${1|this,vm|}.\\$on('${2:event}', ${3:callback})$4"
        ],
        "description": "vm.$on( event, callback )"
    },
    "vm.$once": {
        "prefix": "vmOnce",
        "body": [
            "${1|this,vm|}.\\$once('${2:event}', ${3:callback})$4"
        ],
        "description": "vm.$once( event, callback )"
    },
    "vm.$off": {
        "prefix": "vmOff",
        "body": [
            "${1|this,vm|}.\\$off('${2:event}', ${3:callback})$4"
        ],
        "description": "vm.$off( [event, callback] )"
    },
    "vm.$emit": {
        "prefix": "vmEmit",
        "body": [
            "${1|this,vm|}.\\$emit('${2:event}'${3:, […args]})$4"
        ],
        "description": "vm.$emit( event, […args] )"
    },
    "vm.$mount": {
        "prefix": "vmMount",
        "body": [
            "${1|this,vm|}.\\$mount('$2')"
        ],
        "description": "vm.$mount( [elementOrSelector] )"
    },
    "vm.$forceUpdate": {
        "prefix": "vmForceUpdate",
        "body": [
            "${1|this,vm|}.\\$forceUpdate()"
        ],
        "description": "vm.$forceUpdate()"
    },
    "renderer": {
        "prefix": "renderer",
        "body": [
            "const ${1:renderer} = require('vue-server-renderer').createRenderer()$0"
        ],
        "description": "require('vue-server-renderer').createRenderer()"
    },
    "preventDefault": {
        "prefix": "preventDefault",
        "body": [
            "preventDefault();",
            "$1"
        ],
        "description": "preventDefault()"
    },
    "stopPropagation": {
        "prefix": "stopPropagation",
        "body": [
            "stopPropagation();",
            "$1"
        ],
        "description": "stopPropagation()"
    },
    "importVueRouter": {
        "prefix": "importVueRouter",
        "body": [
            "import VueRouter from 'vue-router'"
        ],
        "description": "import VueRouter from 'vue-router'"
    },
    "newVueRouter": {
        "prefix": "newVueRouter",
        "body": [
            "const ${1:router} = new VueRouter({",
            "\t$2",
            "})$0"
        ],
        "description": "const router = newVueRouter({ })"
    },
    "routerBeforeEach": {
        "prefix": "routerBeforeEach",
        "body": [
            "${1:router}.beforeEach((to, from, next) => {",
            "\t${2:// to and from are both route objects. must call `next`.}",
            "})$0"
        ],
        "description": "router.beforeEach"
    },
    "routerBeforeResolve": {
        "prefix": "routerBeforeResolve",
        "body": [
            "${1:router}.beforeResolve((to, from, next) => {",
            "\t${2:// to and from are both route objects. must call `next`.}",
            "})$0"
        ],
        "description": "router.beforeResolve"
    },
    "routerAfterEach": {
        "prefix": "routerAfterEach",
        "body": [
            "${1:router}.afterEach((to, from) => {",
            "\t${2:// to and from are both route objects.}",
            "})$0"
        ],
        "description": "router.afterEach"
    },
    "routerPush": {
        "prefix": "routerPush",
        "body": [
            "${1:router}.push($2)$0"
        ],
        "description": "router.push()"
    },
    "routerReplace": {
        "prefix": "routerReplace",
        "body": [
            "${1:router}.replace($2)$0"
        ],
        "description": "router.replace()"
    },
    "routerGo": {
        "prefix": "routerGo",
        "body": [
            "${1:router}.go($2)$0"
        ],
        "description": "router.go()"
    },
    "routerBack": {
        "prefix": "routerBack",
        "body": [
            "${1:router}.back($2)$0"
        ],
        "description": "router.back()"
    },
    "routerForward": {
        "prefix": "routerForward",
        "body": [
            "${1:router}.forward($2)$0"
        ],
        "description": "router.forward()"
    },
    "routerGetMatchedComponents": {
        "prefix": "routerGetMatchedComponents",
        "body": [
            "${1:router}.getMatchedComponents($2)$0"
        ],
        "description": "router.getMatchedComponents()"
    },
    "routerResolve": {
        "prefix": "routerResolve",
        "body": [
            "${1:router}.resolve($2)$0"
        ],
        "description": "router.resolve()"
    },
    "routerAddRoutes": {
        "prefix": "routerAddRoutes",
        "body": [
            "${1:router}.addRoutes($2)$0"
        ],
        "description": "router.addRoutes()"
    },
    "routerOnReady": {
        "prefix": "routerOnReady",
        "body": [
            "${1:router}.onReady($2)$0"
        ],
        "description": "router.onReady()"
    },
    "routerOnError": {
        "prefix": "routerOnError",
        "body": [
            "${1:router}.onError($2)$0"
        ],
        "description": "router.onError()"
    },
    "routes": {
        "prefix": "routes",
        "body": [
            "routes: [$1]$0"
        ],
        "description": "routes: []"
    },
    "beforeEnter": {
        "prefix": "beforeEnter",
        "body": [
            "beforeEnter: (to, from, next) => {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "beforeEnter: (to, from, next) => { }"
    },
    "beforeRouteEnter": {
        "prefix": "beforeRouteEnter",
        "body": [
            "beforeRouteEnter (to, from, next) {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "beforeRouteEnter (to, from, next) { }"
    },
    "beforeRouteLeave": {
        "prefix": "beforeRouteLeave",
        "body": [
            "beforeRouteLeave (to, from, next) {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "beforeRouteLeave (to, from, next) { }"
    },
    "scrollBehavior": {
        "prefix": "scrollBehavior",
        "body": [
            "scrollBehavior (to, from, savedPosition) {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "scrollBehavior (to, from, savedPosition) { }"
    },
    "path": {
        "prefix": "path",
        "body": [
            "path"
        ],
        "description": "just a word"
    },
    "alias": {
        "prefix": "alias",
        "body": [
            "alias"
        ],
        "description": "just a word"
    },
    "children": {
        "prefix": "children",
        "body": [
            "children"
        ],
        "description": "just a word"
    },
    "newVuexStore": {
        "prefix": "newVuexStore",
        "body": [
            "const ${1:store} = new Vuex.Store({",
            "\t${2:// ...}",
            "})"
        ],
        "description": "const store = new Vuex.Store({ })"
    },
    "state": {
        "prefix": "state",
        "body": [
            "state"
        ],
        "description": "just a word"
    },
    "getters": {
        "prefix": "getters",
        "body": [
            "getters"
        ],
        "description": "just a word"
    },
    "mutations": {
        "prefix": "mutations",
        "body": [
            "mutations"
        ],
        "description": "just a word"
    },
    "actions": {
        "prefix": "actions",
        "body": [
            "actions"
        ],
        "description": "just a word"
    },
    "modules": {
        "prefix": "modules",
        "body": [
            "modules"
        ],
        "description": "just a word"
    },
    "plugins": {
        "prefix": "plugins",
        "body": [
            "plugins"
        ],
        "description": "just a word"
    },
    "commit": {
        "prefix": "commit",
        "body": [
            "commit"
        ],
        "description": "just a word"
    },
    "dispatch": {
        "prefix": "dispatch",
        "body": [
            "dispatch"
        ],
        "description": "just a word"
    },
    "replaceState": {
        "prefix": "replaceState",
        "body": [
            "replaceState"
        ],
        "description": "just a word"
    },
    "subscribe": {
        "prefix": "subscribe",
        "body": [
            "subscribe"
        ],
        "description": "just a word"
    },
    "registerModule": {
        "prefix": "registerModule",
        "body": [
            "registerModule"
        ],
        "description": "just a word"
    },
    "unregisterModule": {
        "prefix": "unregisterModule",
        "body": [
            "unregisterModule"
        ],
        "description": "just a word"
    },
    "hotUpdate": {
        "prefix": "hotUpdate",
        "body": [
            "hotUpdate"
        ],
        "description": "just a word"
    },
    "mapState": {
        "prefix": "mapState",
        "body": [
            "mapState"
        ],
        "description": "just a word"
    },
    "mapGetters": {
        "prefix": "mapGetters",
        "body": [
            "mapGetters"
        ],
        "description": "just a word"
    },
    "mapActions": {
        "prefix": "mapActions",
        "body": [
            "mapActions"
        ],
        "description": "just a word"
    },
    "mapMutations": {
        "prefix": "mapMutations",
        "body": [
            "mapMutations"
        ],
        "description": "just a word"
    },
    "asyncData": {
        "prefix": "asyncData",
        "body": [
            "asyncData({${1:isDev}${2:, route}${3:, store}${4:, env}${5:, params}${6:, query}${7:, req}${8:, res}${9:, redirect}${10:, error}}) {",
            "\t$11",
            "},"
        ],
        "description": "Type: Function."
    }
}